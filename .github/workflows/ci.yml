name: MLflow CI/CD Pipeline - Advanced

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

env:
  DOCKER_IMAGE_NAME: notsuperganang/heart-disease-mlflow
  MLFLOW_TRACKING_URI: file:./mlruns

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.7'
    
    # Step 3: Install Conda
    - name: Install Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: '3.12.7'
        activate-environment: mlflow-env
    
    # Step 4: Install MLflow and dependencies
    - name: Install MLflow and Dependencies
      shell: bash -l {0}
      run: |
        echo "Installing MLflow and required packages..."
        pip install mlflow==2.19.0
        pip install scikit-learn==1.7.2 pandas==2.1.4 numpy==1.26.2
        echo "‚úÖ Dependencies installed"
    
    # Step 5: Run MLflow Project
    - name: Run MLflow Project Training
      shell: bash -l {0}
      run: |
        echo "============================================================"
        echo "Starting MLflow Project Training"
        echo "============================================================"
        cd MLProject
        mlflow run . --env-manager=local
        echo "‚úÖ Training completed successfully!"
    
    # Step 6: List MLflow artifacts
    - name: List MLflow Artifacts
      shell: bash -l {0}
      run: |
        cd MLProject
        echo "============================================================"
        echo "MLflow Run Artifacts"
        echo "============================================================"
        
        # Find the latest run ID
        RUN_ID=$(ls -t mlruns/0/ | grep -v "meta.yaml" | head -n 1)
        echo "Latest Run ID: $RUN_ID"
        
        # Show full directory structure
        echo ""
        echo "Directory structure:"
        ls -lhR mlruns/0/$RUN_ID/
        
        if [ -d "mlruns/0/$RUN_ID/artifacts" ]; then
          echo ""
          echo "‚úÖ Artifacts found:"
          ls -lh "mlruns/0/$RUN_ID/artifacts/"
          
          # Check if model exists
          if [ -d "mlruns/0/$RUN_ID/artifacts/model" ]; then
            echo ""
            echo "‚úÖ Model directory found:"
            ls -lh "mlruns/0/$RUN_ID/artifacts/model/"
            
            # Display model metadata
            if [ -f "mlruns/0/$RUN_ID/artifacts/model/MLmodel" ]; then
              echo ""
              echo "Model metadata (MLmodel):"
              cat "mlruns/0/$RUN_ID/artifacts/model/MLmodel"
            fi
          else
            echo ""
            echo "‚ùå WARNING: Model directory not found!"
            echo "This may cause issues in Docker build step."
          fi
        else
          echo ""
          echo "‚ùå ERROR: No artifacts found!"
          exit 1
        fi
    
    # Step 7 (SKILLED): Upload artifacts to GitHub
    - name: Upload Model Artifacts to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-model-${{ github.run_number }}
        path: |
          MLProject/mlruns/
        retention-days: 30
    
    # Step 8 (SKILLED): Commit artifacts to repository (optional)
    - name: Commit Model Artifacts to Repository
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        cd MLProject
        
        # Create artifacts directory
        mkdir -p ../artifacts
        
        # Find latest run ID
        RUN_ID=$(ls -t mlruns/0/ | grep -v "meta.yaml" | head -n 1)
        
        if [ -d "mlruns/0/$RUN_ID/artifacts/model" ]; then
          cp -r "mlruns/0/$RUN_ID/artifacts/model" ../artifacts/latest-model
          
          # Create metadata file
          echo "Run ID: $RUN_ID" > ../artifacts/metadata.txt
          echo "Timestamp: $(date)" >> ../artifacts/metadata.txt
          echo "Commit: ${{ github.sha }}" >> ../artifacts/metadata.txt
          echo "Run Number: ${{ github.run_number }}" >> ../artifacts/metadata.txt
          
          cd ..
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add artifacts/
          git diff --staged --quiet || git commit -m "chore: update model artifacts from run #${{ github.run_number }} [skip ci]"
          git push
          
          echo "‚úÖ Artifacts committed to repository"
        fi
    
    # Step 9 (ADVANCED): Build Docker Image with MLflow
    - name: Build Docker Image with MLflow
      shell: bash -l {0}
      run: |
        cd MLProject
        
        echo "============================================================"
        echo "Building Docker Image with MLflow"
        echo "============================================================"
        
        # Set MLflow tracking URI
        export MLFLOW_TRACKING_URI=file:$(pwd)/mlruns
        
        # Find the latest run ID
        RUN_ID=$(ls -t mlruns/0/ | grep -v "meta.yaml" | head -n 1)
        
        echo "Run ID: $RUN_ID"
        echo "MLflow Tracking URI: $MLFLOW_TRACKING_URI"
        
        # Verify model exists
        MODEL_PATH="mlruns/0/$RUN_ID/artifacts/model"
        if [ -d "$MODEL_PATH" ]; then
          echo "‚úÖ Model found at: $MODEL_PATH"
          ls -lh "$MODEL_PATH"
        else
          echo "‚ùå Model not found at: $MODEL_PATH"
          echo "Available artifacts:"
          find mlruns -name "model" -type d
          exit 1
        fi
        
        # Build docker image using mlflow with runs:/ URI
        mlflow models build-docker \
          --model-uri "runs:/$RUN_ID/model" \
          --name "${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_number }}"
        
        # Also tag as latest
        docker tag "${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_number }}" "${{ env.DOCKER_IMAGE_NAME }}:latest"
        
        echo "‚úÖ Docker image built successfully!"
        echo ""
        echo "Docker images:"
        docker images | grep heart-disease-mlflow
    
    # Step 10 (ADVANCED): Login to Docker Hub
    - name: Login to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Step 11 (ADVANCED): Push Docker Image to Docker Hub
    - name: Push to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "============================================================"
        echo "Pushing Docker Image to Docker Hub"
        echo "============================================================"
        
        docker push "${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_number }}"
        docker push "${{ env.DOCKER_IMAGE_NAME }}:latest"
        
        echo "‚úÖ Docker images pushed to Docker Hub!"
        echo ""
        echo "Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_IMAGE_NAME }}"
    
    # Step 12: Generate Summary Report
    - name: Generate Summary Report
      shell: bash -l {0}
      run: |
        cd MLProject
        
        echo "============================================================"
        echo "üìä CI/CD Pipeline Summary"
        echo "============================================================"
        echo ""
        echo "üéØ Training: ‚úÖ Completed"
        echo "üì¶ Artifacts: ‚úÖ Uploaded to GitHub"
        echo "üíæ Repository: ‚úÖ Committed (if main branch)"
        echo "üê≥ Docker: ‚úÖ Built and pushed (if main branch)"
        echo ""
        echo "üîó Links:"
        echo "  ‚Ä¢ Artifacts: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "  ‚Ä¢ Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_IMAGE_NAME }}"
        echo ""
        echo "============================================================"
